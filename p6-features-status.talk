title: Perl 6 - Features und Status
subtitle: Die Zukunft ist hier, nur ungleichmässig verteilt
author: Moritz Lenz <moritz@faui2k3.org>
affiliation: #perl6
-----------

= Perl 6 - Übersicht

    * Allgemeines
    * Compiler-Uebersicht
    * Features

= Was ist Perl 6?

    * Sprachspezifikation
    * Mehrere Compiler
        (wie bei C, C++, Fortran, python, ...)
    * Test suite
    * Modulsystem

= Beziehung zu Perl 5

    * Als Nachfolger von Perl 5 gedacht
    * Aber Perl 5 wurde weiter entwickelt
    * "Two languages from the Perl family" --  Larry Wall

= Compiler

    * Rakudo <http://rakudo.org/>
    * Niecza <https://github.com/sorear/niecza>

= Rakudo

   * Setzt auf der Parrot Virtual Machine auf 
   * Ziel: benutzbar fuer moeglichst viele User
   * Kompiliert source code nach Bytecode, führt direkt aus
   * Monatliche Releases
   * Entwickler: Jonathan Worthington, Patrick Michaud, Moritz Lenz, Carl
     Masak, Tadeusz Sośnierz, Solomon Foster

= Niecza

    * Baut auf CLR (Mono/.NET) auf
    * Ziel: Mit Optimierungen experimentieren
    * Name kommt von "Nie mamy czas", "wir haben keine Zeit"
    * Monatliche Releases
    * Entwickler: Stefan O'Rear, Solomon Foster

= Vergleich von Rakudo und Niecza

    * Bestehen vergleichbare Anzahl von Tests
    * Rakudo häufig schnneller beim kompilieren, Niecza fast immer schneller
      zur Laufzeit
    * Rakudos Stärken: Objektsystem, built-ins, binary IO, C-Funktionen
      aufrufen (via NativeCall.pm)
    * Nieczas Stärken: Regexes/Grammars, Unicode, gute
      Syntax-Fehlermeldungen, Integration mit CLR-Bibliotheken


= Perl 6 Features: Basics
:features(r+ n+)

    * Variablen
    * Kontrollstrukturen
    * Basistypen (`St`, `Int`, `Rat`, `List`, `Array`, `Hash`)
    * Funktionen

= Junctions
:features(r+ n+)
:perl6

    my @dice = (1..6).roll(2);
    if @dice.join eq '12' | '21' {
        #            ^^^^^^^^^^^  Junction
        say 'Mäxchen!';
    }

= Junctions: Typen
:features(r+ n+)

    * `any` oder `|`: mindestens ein Treffer
    * `all` oder `&`: alle müssen passen
    * `one` oder `^`: genau ein Treffer
    * `none`: kein Treffer

= Subroutinen, Signaturen
:features(r+ n+)
:perl6

    sub greet($who) {
        say "hello $who"
    }
    greet("GPW");       # hello GPW
    say &greet.WHAT;    # Sub()

= Signaturen: Variable Anzahl von Argumenten
:features(r+ n+)
:perl6

    sub up-join($sep, *@items) {
        join $sep, map &uc, @items
    }
    say up-join ", ", <a b c>   # A, B, C

= Typen I
:features(r+ n+)
:perl6

    sub square(Numeric $x) {
        $x * $x
    }
    say square(42);     # 1764
    my $x = 'foo';
    square($x); # BOOM

= Interessante Typen: Zahlen
:features(r+ n+)

    * `Int`: beliebig große Integer
    * `Num`: 64 bit floating points
    * `Rat`: Bruchzahlen
    * `Real`: Int, Num, Rat
    * `Complex`: Komplexe Zahlen
    * `Numeric`: Complex, Real

= Andere Typen
:features(r+ n+)

    * `Str`: (Unicode-)Strings
    * `Buf`: Binäre strings
    * `List`, `Array`
    * `EnumMap`, `Hash`

= Typen II: Check zur Compile-Zeit
:features(r+ n-)
:perl6

    sub a(Int $x) { }; a "foo"
    # ===SORRY!===
    # CHECK FAILED:
    # Calling 'a' will never work with argument
    # types (str) (line 1)
    # Expected: :(Int $x)

= Typen weiter verfeinern
:features(r+ n+)
:perl6

    subset Positive of Real where { $_ > 0 };
    sub circle-area(Positive $r) {
        $r * $r * pi;
    }
    say circle-area(3); # works
    say circle-area(-3); # BOOM
    # Constraint type check failed for parameter '$r'
    #   in sub circle-area at /home/moritz/subset.pl:2

= Multi Subroutinen
:features(r+ n+)
:perl6

    multi to-json(Real $x) { $x.Str }
    multi to-json(@x) { 
        '[' ~ @x.map(&to-json).join(', ') ~ ']'
    }
    ...

= Multi Subroutinen: Dispatch
:features(r+ n+)

  * Anzahl der Argumente
  * Typ der Argumente
  * Weitere Bedingungen `where ... `

= Klassen
:features(r+ n+)
:perl6

    class Task {
        has &.action;
        has Bool $.done = False;
        has @.dependencies;

        method do {
            last if $.done;
            .do for @.dependencies;  # resolve dependencies
            &.action();              # perform the action
            $!done = True;
        }
    }

= Klassen: Objekte benutzen
:features(r+ n+)
:perl6

    my $root = Task.new(
        :action( { say 'Eat breakfast' }),
        :dependencies[
            Task.new( :action( { say 'Prepare breakfast' } ) ),
            Task.new( :action( { say 'Set the table' } ) ),
        ]
    );
    $root.do;

    # output:
    Set the table
    Wake girlfriend
    Eat breakfast


= Klassen: Delegation
:features(r+ n-)
:perl6

    class Task {
        ...
        # method 'add-dependency' is handled
        # by @!dependenies.push
        has @.dependencies handles
            add-dependency => 'push';
        ...
    }
    ...
    $root.add-dependency(
        Task.new( :action( { say 'Wake girlfriend' } ) );
    );


= Rollen
:features(r+ n+)

    * Können Attribute und Methoden haben
    * Attribute und Methoden werden intelligent in Klassen kopiert
    * Konflikte und fehlende Methoden werden zur Kompile-Zeit erkannt

= Rollen
:features(r+ n+)
:perl6

    role Real { # for real numbers
        method abs  { self <= 0 ?? -self !! self }
        method sqrt { self.Num.sqrt }
        ...
    }
    class Int does Real { }
    say 10.sqrt; # 3.16227766016838

= Rollen: Konflikte
:features(r+ n+)
:perl6

    role A { method x { } };
    role B { method x { } }; 
    class C does A does B { };

    # BOOM:
    # Method 'x' must be resolved by class C because it exists in
    # multiple roles (B, A)

= Rollen als Interfaces
:features(r+ n+)
:perl6

    role A {
        method x { ...}  # tatsächlich ... hier
    };
    class B does A { };

    # BOOM:
    # Method 'x' must be implemented by 'B' because it is
    # required by role A 

= Regexes
:features(r+ n+)
:perl6

    my $text = 'This contains a double double word';
    if $text ~~ / « (\w+) \s+  $0 » / {
        say "Duplicate word '$0' found";
    }

    # output: Duplicate word 'double' found

= Grammatiken
:features(r+ n+)

    * Grammatiken sind Klassen, die benannte Regexes enthalten
    * Bieten die volle Flexibilität des Objektsystems
    * Machen es viel leichter, Regexes wiederzuverwenden

= Grammatiken
:features(r+ n+)
:perl6

    grammar Number {
        token TOP { ^ [ <int> | <hex> ] $ }
        token int { \d+ }
        token hex { '0x' (<[a..f A..F 0..9]>+) }
    }
    Number.parse('0xDEADBEEF');
    say $/.keys;        # int
    say $<hex>[0].Str;  # DEADBEEF


= Danke für eure Aufmerksamkeit!
:raw

<center style="font-size: 200%">
<p><strong>ENDE</strong></p>
<h4>Fragen?</h4>
</center>
