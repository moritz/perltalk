= Perl 6 - Übersicht

    * Allgemeines
    * Unterschiede 5 => 6 am Beispiel erklärt
    * Subs und Signaturen
    * Objektsystem
    * Regexes
    * Grammatiken


= Was ist Perl 6?

    * Sprachspezifikation
    * Mehrere Compiler
        (wie bei C, C++, Fortran, python, ...)
    * Test suite
    * Standard-Grammatik (STD.pm6)

= Beziehung zu Perl 5

    * Als Nachfolger von Perl 5 gedacht
    * Aber Perl 5 wurde weiter entwickelt
    * "Two languages from the Perl family" --  Larry Wall

= Compiler

    * mildew, perlito, elf, pugs, sprixel, yapsi
    * Rakudo <http://rakudo.org/>
        => für die Beispiele hier

= Rakudo

   * Setzt auf der Parrot Virtual Machine auf 
   * Kompiliert source code nach Bytecode, führt direkt aus
   * Monatliche Releases
   * Entwickler: v.a. Patrick Michaud, Jonathan Worthington

= Rakudo installieren
:text

    git clone http://github.com/rakudo/rakudo.git
    cd rakudo
    perl Configure.pl --gen-parrot
    make install
    export PATH=$PATH:`pwd`/parrot_install/bin
    perl6 -e 'say "success"'

= Rakudo: Fortschrit
:raw

<img src="progress.png" />

= Perl 6: Wie Perl 5:

    * Sigils an Variablen, :: für namespaces
    * Blocks mit `{...}`, subs mit `sub`
    * `if, for, while` wie in Perl 5
    * `say, given/when`, smart matching nach 5.10 rück-portiert

= ... nur besser/anders

    * `strict` als Voreinstellung
    * Sigils invariant `@array` => `@array[$index]`
    * `if ($condition) { }`   => `if $condition`
    * `%hash{$var}` für Variablen, `%hash<literal>` für Literale
    * `for my $x (@list) { ... }`  => `for @list -> $x { ... }`  (lambdas)

= Beispiel: Wörter zählen in Perl 5
:perl

    use strict;
    use warnings;
    my %words;
    while (my $line = <STDIN>) {
        for ($line =~ /(\w+)/g) {
            $words{$1}++;
        }
    }
    my @top_keys = sort { $words{$b} <=> $words{$a} }
                        keys %words;
    for (@top_keys[0..9]) {
        print "$words{$_}\t$_\n";
    }


= Beispiel: Wörter zählen in Perl 6
:perl6

    use v6;
    my %words;
    for $*IN.lines -> $line {
        for $line.words {
            %words{$_}++;
        }
    }
    my @top_pairs = %words.sort: { -.value };
    for @top_pairs[^10] {
        say .value, "\t", .key;
    }

= Unterschiede (I)

    * `while (my $line = <STDIN>)` => `for $*IN.lines -> $line`
    * `$*IN`: "contextual" variable, in dynamischen und lexikalischen Scopes
      überschreibbar
    * `$*IN.lines`: "lazy" Liste der Zeilen (ohne \n)
    * `-> $line { ... }`: "pointy block" mit Signatur

= Unterschiede (II)

    * `for ($line =~ /(\w+)/g)` => `for $line.words`
    * `Str.words` ist neu, könnte man auch als
      `Str.comb(/\S+/)` schreiben
    * `$words{$_}++` => `%words{$_}++`: Sigil invariant

= Unterschiede (III)

    * `my @top_keys = sort { $words{$b} <=> $words{$a} } keys %words;`
        => `my @top_pairs = %words.sort: { -.value };`
    * Ein Hash in list-Kontext ist eine Liste von Paaren
    * Alles ist ein Objekt
    * `List.sort` sortiert nach dem Wert, den eine 1-argument-Closure
       zurückgibt
    * `.value`: Kurz für `$_.value`
    * => @top_pairs enthält sortierte Liste der keys

= Unterschiede (IV)
    
    * `@top_keys[0..9]` => `@top_pairs[^10]`
    * Array slice
    * `^10` ist kurz für `0..9`
    * `say .value, "\t", .key;` Methodenaufrufen auf das `Pair`-Objekt in `$_`

= Unterschiede - Zusammenfassung

    * Sigils invariant
    * Viele Built-ins als Methoden verfügbar
    * Einige Klammern optional
    * `.foo` ist kurz für `$_.foo`

= Subs und Signaturen (I)
:perl6

    sub logarithm($num, $base = 2.7183) {
        return log($num) / log($base)
    }
    say logarithm(4);       # Benutzt default
    say logarithm(4, 2);

= Subs und Signaturen (II)
:perl6

    sub swap($a is rw, $b is rw) {
        ($a, $b) = ($b, $a);
    }
    swap(my $x = 1, my $y = 3);
    say $x;         # 3

    swap(3, 4);     # sollte sterben, RT #74820

= Benannte Parameter
:perl6

    sub rectangle(:$width!, :$height!, :$char = 'X') {
        say $char x $width for ^$height;
    }

    rectangle char => 'o', width => 8, height => 4;
    rectangle :width(20), :height<5>;

= Multis
:perl6

    multi sub what(Int $x) { say "Int" }
    multi sub what(Str $x) { say "Str" }
    multi sub what($x)     { say "Something else" }
    
    what('foo');    # Str
    what([]);       # Something else

= Multis (kürzer)
:perl6

    multi what(Int $) { say "Int" }
    multi what(Str $) { say "Str" }
    multi what($)     { say "Something else" }
    
    what('foo');    # Str
    what([]);       # Something else

= Multis Einschränkungen, Operatoren
:perl6

    multi postfix:<!>(Int $x) { $x * ($x-1)! }
    multi postfix:<!>(Int $x where { $x == 0}) { 1 }

    say 5!;         # 120

= Multis Einschränkungen, Operatoren (kürzer)
:perl6

    multi postfix:<!>(Int $x) { $x * ($x-1)! }
    multi postfix:<!>(0)      { 1 }

    say 5!;         # 120

= Subs - Zusammefassung

    * Subs können Paramater haben
    * Parameter können nach Positiona und Name gefüllt werden
    * Mehrere Subs mit dem gleichen Namen möglich (Multis)
    * Einschränkung nach Typ und mit Code möglich

= Objektsystem
:perl6

    class Entrepreneur {
        has $.balance = 0;
        method pay ($amount) {
            die "bankrupt" if $amount > $!balance;
            say "Paying $amount Euro";
            $!balance -= $amount;
        }
    }

    my $e = Entrepreneur.new(balance => 100);
    $e.pay(30);
    say $e.balance;     # 70
    $e.pay(120);        # bankrupt

= Objektsystem im Detail (1)

    * `class MeineKlasse { ... }` definiert Klasse
    * `class A is B { ... }` Vererbung
    * `has $!private-attribute` Privates Attribute
    * `has $.foo`  = `has $!foo; method foo { $!foo }`

= Objektsystem im Detail (2)

    * `method die-methode { ... }` hat Zugriff auf 
      `self` und Attribute
    * Klassen haben per Default einen Konstruktor `new`

= Objektsystem - Zusammenfassung

    * Deklaration von Klassen, Methoden und Attributen per Schlüsselwort
    * Attribute: `$!attrib`, öffentlicher Zugriff `$.attrib'
    * Vererbung mit `is`

= Regexes

    * Literale: Buchstaben, Zahlen, \ + Interpunktion
    * Metasyntaktisch: \ + Buchstabe, Zahl; (alle) Interpunktion
    * Quantoren wie in Perl 5: `?, +, *`
    * `{12,23}` => `** 12..23`
    * `{3,}`    => `** 3..*`

= Whitespace in Regexes

    * Whitespace: per Default ignoriert
    * Mit dem `:sigspace` (oder `:s`) modifier durch `<.ws>` ersetzt

= Regexes: Gruppierungen

    * `( )`   bleibt
    * `(?: )` => `[ ]`
    * Zeichenklassen `[a-z]` => `<[a..z]>`
    * Bennante regexes: `<alpha>`, `<panic("Syntax error")>`
    * Quoting: `'...'` und `"..."`

= Regexes: Captures

    * `"abc" ~~ / ( a (b)) (c) /`
    * Alle Captures in `$/`
    * `$0` = `$/[0]`, `$1` = `$/[1]` etc.
    * Verschachtelte Captures: `$/[0] eq "ab"`, `$/[0][0] eq "b"`,
        `$/[1] eq "c"`
    * Match-Objekte sind Bäume

= Regexes: Benannte Captures

    * `'abc23' ~~ /<alpha>+/`
    * Benannte captures: `$/<alpha>` = `$<alpha>`
    * Match-Objekte verhalten sich wie Listen und Hashes
    * Da `<alpha>` quantifiziert ist, ist `$<alpha>` eine Liste

= Grammatiken
:perl6

    grammar URI {
        token TOP { <schema> '://' <host> 
            [ ':' <port> ]?  <path> };
        token schema { <[a..z]>+ }
        token host   { [\w+] ** \. }
        token port   { \d+ }
        token path   { '/' \S* }
    }

    my $m = URI.parse('http://perl6.org/');
    say $m<schema>;     # http
    say $m<path>;       # /

= Grammatiken - Vererbung
:perl6

    grammar URL::HTTP is URI {
        token schema { 'http' }
    }

    for <http://perl6.org/ ftp://cpan.org/> -> $url {
        my $m = URL::HTTP.parse($url);
        print "NOT " unless $m;
        say "parsed $url";
    }

= Grammatiken - Proto Regexes (I)
:perl6

grammar URI {
    token TOP { <schema> '://' <host>  
        [ ':' <port> ]?  <path> };

    proto token schema { <...> }
    token schema:sym<http>  { <sym> }
    token schema:sym<https> { <sym> }
    token schema:sym<ftp>   { <sym> }
    ...
}

= Grammatiken - Proto Regexes (II)
:perl6

grammar URI::Other is URI {
    # durch Vererbung neue Alternative hinzugefügt
    token schema:sym<irc> { <sym> }
}

for URI, URI::Other -> $grammar {
    for <http://perl6.org/
            irc://freenode.org/#perl6> -> $url {
        say $grammar.parse($url) ?? '[X]' !! '[ ]',
            " $grammar.perl(), $url";
    }
}

= Grammatiken - Daten extrahieren

 * Jede regex führt optional nach dem matchen eine Methode aus
 * Diese "reduction methods" bekommen das Match Object als Argument
 * Jedes Match Object hat ein `ast` Attribut, das mit `make()` gesetzt werden
   kann

= Grammatiken - Resultatobjekte
:perl6

class URI::Storage {
    has $.schema;
    has $.host;
    has $.port;
    has $.path;
    method Str {
           $.schema ~ '://' ~ $.host
        ~  ':' ( $.port || 80 )
        ~  $.path;
    }
}


= Grammatiken - Aktionen
:perl6
    
class URI::Actions {
    method TOP($/) {
        my %attr;
        for <schema port path host> {
            %attr{$_} = ~$/{$_};
        }
        %attr<port> = ~$<port>[0] if $<port>;
        make URI::Storage.new(|%attr);
    }
}

= Grammatiken - Aktionen Einsetzen
:perl6

my $m = URI.parse('http://perl6.org/',
            :actions(URI::Actions.new));

my $uri = $m.ast;
say $uri.WHAT;        # URI::Storage()
say $uri.schema;      # http
say $uri;             # http://perl6.org:80/

= Zusammenfassung

 * Bennante Regexes in Grammatiken organisiert
 * Vererbung kann Regeln überschreiben und ergänzen
 * Reduktionsmethoden können Datenstrukturen bauen

= Danke für eure Aufmerksamkeit!
:raw

<center style="font-size: 200%">
<p><strong>ENDE</strong></p>
<h4>Fragen?</h4>
</center>
